"""
Django settings for Bigflow project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
from environs import Env
env = Env()
env.read_env()




































import boto3
from botocore.exceptions import ClientError
def sending_mail():
    # sendermail = common.senderemail()
    SENDER = "Karur Vysya Bank <emc-noreply@kvbmail.com>"
    # RECIPIENT = 'rvignesh@vsolv.co.in,vsolvstab@gmail.com'
    AWS_REGION = "ap-south-1"
    SUBJECT = 'TESTING MAIL'
    BODY_TEXT = ("")
    BODY_HTML = """<html>
    <head></head>
    <body>
    <p>'Only for testing Purpose Kindly Ignore'</p>
    </body>
    </html>
                """
    CHARSET = "UTF-8"
    client = boto3.client('ses', region_name=AWS_REGION)
    try:
        # Provide the contents of the email.
        response = client.send_email(
            Destination={
                'ToAddresses': [
                    'rvignesh@vsolv.co.in','vsolvstab@gmail.com',
                ],
            },
            Message={
                'Body': {
                    'Html': {
                        'Charset': CHARSET,
                        'Data': BODY_HTML,
                    },
                    'Text': {
                        'Charset': CHARSET,
                        'Data': BODY_TEXT,
                    },
                },
                'Subject': {
                    'Charset': CHARSET,
                    'Data': SUBJECT,
                },
            },
            Source=SENDER,
        )
    # Display an error if something goes wrong.
    except ClientError as e:
        return (e.response['Error']['Message'])
    else:
        print(response['MessageId'])
        return 'SUCCESS'




# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# This will be a password key for encrypt and decrypt datas(We may change key what ever we want)
Password_Key = 'Vsolv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# at a specific time






# import urllib
# url = "https://ifconfig.me/forwarded"
# file = urllib.request.urlopen(url)
# for line in file:
# 	decoded_line = line.decode("utf-8")
# 	print(decoded_line)
# user_ip = decoded_line.split(",")
# print(user_ip)
#
#8
# DB_HOT = env.str('IP_ADDRESS_VALIDATE')
# envIP_list = DB_HOT.split(",")
# print(envIP_list)
#
# for i in envIP_list:
#     i =i.replace(" ", "")
#     print(i)115.254.60.34
#     for j in user_ip:
#         j = j.replace(" ", "")
#         print(j)
#         if i == j:
#             cond_tion = True
#
#             print(cond_tion)
#             break
#         else:
#             cond_tion = False
#
#             print(cond_tion)
#     if cond_tion:
#         break
#
#
#
#
#
#
#


# 115.112.123.236,
# 115.254.60.34 &
# 223.31.193.23







ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Bigflow.Core',
    'Bigflow.Master',
    'Bigflow.Transaction',
    'Bigflow.UserMgmt',
    'Bigflow.Purchase',
    'Bigflow.Service',
    'Bigflow.AP',
    'Bigflow.inward',
    'Bigflow.BOM',
    'Bigflow.Inventory',
    'Bigflow.Collection',
    'Bigflow.Sales',
    'Bigflow.Report',
    'Bigflow.ATMA',
    'Bigflow.FA',
    'Bigflow.Proofing',
    'Bigflow.eRMA',
    'rest_framework.authtoken',
    'rest_framework',
    'Bigflow.MEP',
    'Bigflow.StandardInstructions',
    'Bigflow.ServiceManagement',
    'Bigflow.BranchExp',
    # 'Bigflow.Memo'
    'Bigflow.EBexpense',
    'Bigflow.DemoFet',
    #'preventconcurrentlogins'

    # 'django_celery_results',
    # 'django_celery_beat',
]


# for line in file:
# 	decoded_line = line.decode("utf-8")
# 	print(decoded_line)

# string = ' v iv vv'
# print(string.replace(" ", ""))
# string_ = 'fdfdfdf'
# print(string_.replace(" ", ""))


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'preventconcurrentlogins.middleware.PreventConcurrentLoginsMiddleware',
]

ROOT_URLCONF = 'Bigflow.urls'
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760 # 10 mb
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/Bigflow/Templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'customer_tags': 'Bigflow.menuClass',

            }
        },
    },
]

WSGI_APPLICATION = 'Bigflow.wsgi.application'


DB_ENGINE = env.str('DB_ENGINE')
DB_NAME = env.str('DB_NAME')
DB_USER = env.str('DB_USER')
DB_PASSWORD = env.str('DB_PASSWORD')
DB_HOST = env.str('DB_HOST')
DB_PORT = env.str('DB_PORT')
DATABASES = {
   'default': {
       'ENGINE': DB_ENGINE,
       'NAME': DB_NAME,
       'USER': DB_USER,
       'PASSWORD': DB_PASSWORD,
       'HOST': DB_HOST,
       'PORT': DB_PORT,
   }
}

SESSION_COOKIE_AGE = 2000 * 60 #  FOR DEVELOPMENT ITS 60*150 (but in production 60* 15)
SESSION_SAVE_EVERY_REQUEST = True




#
#
#
# import cv2
# import sys
#
# # Get user supplied values
# imagePath = sys.argv[1]
# cascPath = 'haarcascade_frontalface_default.xml'
#
# # Create the haar cascade
# faceCascade = cv2.CascadeClassifier(cascPath)
#
# # Read the image
# image = cv2.imread('23.jpg')
# gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#
# # Detect faces in the image
# faces = faceCascade.detectMultiScale(
#     gray,
#     scaleFactor=1.1,
#     minNeighbors=5,
#     minSize=(30, 30),
#     flags = cv2.data.haarcascades
# )

# print("Found {0} faces!".format(len(faces)))
#
# # Draw a rectangle around the faces
# for (x, y, w, h) in faces:
#     cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
#
# cv2.imshow("Faces found", image)
# cv2.waitKey(0)
#













#
# ary = [3, 4, 7]
# ary1 =[]
# increment = 0
# maxim_val = max(ary)
# for i in ary:
#     if(i < maxim_val):
#         output = maxim_val - i
#         increment = increment + output








# productdetails = [{'size': '15', 'Color': 'Blue', 'Model': 'Dell','df':'df'}]
# ary=[]
# for json_dict in productdetails:
#     for key, value in json_dict.items():
#         ary.append({"keydata": key, "valuedata": value})
# v = ary
# print(v)

# import boto3
# from botocore.exceptions import ClientError
#
# # # Replace sender@example.com with your "From" address.
# # # This address must be verified with Amazon SES.
# SENDER = "Vignesh <emc-noreply@kvbmail.com>"
#
# # Replace recipient@example.com with a "To" address. If your account
# # is still in the sandbox, this address must be verified.
# RECIPIENT = "moneshraj16@gmail.com"
#
# # Specify a configuration set. If you do not want to use a configuration
# # set, comment the following variable, and the
# # ConfigurationSetName=CONFIGURATION_SET argument below.
# CONFIGURATION_SET = "ConfigSet"
#
# # If necessary, replace us-west-2 with the AWS Region you're using for Amazon SES.
# AWS_REGION = "ap-south-1"
#
# # The subject line for the email.
# SUBJECT = "Test coding"
#
# # The email body for recipients with non-HTML email clients.
# BODY_TEXT = ("Amazon SES Test (Python)\r\n"
#              "This email was sent with Amazon SES using the "
#              "AWS SDK for Python (Boto)."
#              )
#
# # The HTML body of the email.
# BODY_HTML = """<html>
# <head></head>
# <body>
#   <h1>Amazon SES Test (SDK for Python)</h1>
#   <p>This email was sent with
#     <a href='https://aws.amazon.com/ses/'>Amazon SES</a> using the
#     <a href='https://aws.amazon.com/sdk-for-python/'>
#       AWS SDK for Python (Boto)</a>.</p>
#           <td colspan="1">
#                                              <img src="https://emc-vysfin-uat.kvbank.in/static/Images/kvb_logo.jpg" alt="kvb" style="width:100px;height:100px;"
#                                                  title="kvb"></a>
#                                          </td>
# </body>
# </html>
#             """
#
# # The character encoding for the email.
# CHARSET = "UTF-8"
#
# # Create a new SES resource and specify a region.
# client = boto3.client('ses', region_name=AWS_REGION)
#
# # Try to send the email.
# try:
#     # Provide the contents of the email.
#     response = client.send_email(
#         Destination={
#             'ToAddresses': [
#                 RECIPIENT,
#             ],
#         },
#         Message={
#             'Body': {
#                 'Html': {
#                     'Charset': CHARSET,
#                     'Data': BODY_HTML,
#                 },
#                 'Text': {
#                     'Charset': CHARSET,
#                     'Data': BODY_TEXT,
#                 },
#             },
#             'Subject': {
#                 'Charset': CHARSET,
#                 'Data': SUBJECT,
#             },
#         },
#         Source=SENDER,
#     )
# # Display an error if something goes wrong.
# except ClientError as e:
#     print(e.response['Error']['Message'])
# else:
#     print("Email sent! Message ID:"),
#     print(response['MessageId'])


# This will not run on online IDE








CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
S3_BUCKET_NAME = 'vysfin-assets-uat'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

import os
STATICFILES_DIRS = (
    os.path.join(os.path.dirname(__file__), 'static'),
)


import getpass
import socket
import subprocess
username = getpass.getuser()
host = socket.gethostbyname('')
print(host)


import socket
socket.gethostbyname(socket.gethostname())


LOGIN_URL = 'login'


MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'media')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}






from datetime import timedelta
# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     'ROTATE_REFRESH_TOKENS': False,
#     'BLACKLIST_AFTER_ROTATION': True,
#     'ALGORITHM': 'HS256',
#     'VERIFYING_KEY': None,
#     'AUDIENCE': None,
#     'ISSUER': None,
#     'AUTH_HEADER_TYPES': ('Bearer',),
#     'USER_ID_FIELD': 'id',
#     'USER_ID_CLAIM': 'user_id',
#     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
#     'TOKEN_TYPE_CLAIM': 'token_type',
#     'JTI_CLAIM': 'jti',
#     'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
#     'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),
#     'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
# }






def getMissingNumber(A):
    # get the array's length
    n = len(A)

    # actual size is `n+1` since a number is missing from the list
    m = n + 1

    # get a sum of integers between 1 and `n+1`
    total = m * (m + 1) // 2

    # the missing number is the difference between the expected sum and
    # the actual sum of integers in the list
    return total - sum(A)


if __name__ == '__main__':
    input1 = 5
    input2 = [1, 2, 3, 4, 5, 7, 8, 9, 10]

    print("The missing number is", getMissingNumber(A))

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1990),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=1990),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=10),
}
MEDIA_URL = '/media/'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'vsolvstab@gmail.com'
EMAIL_HOST_PASSWORD = 'stabchristmas_day'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False


#http://docs.celeryproject.org/en/v4.0.2/userguide/configuration.html
# CELERY_BROKER_URL = 'redis://localhost:6379'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'Asia/Makassar'
#
# #from celery.schedules import crontab
# # Other Celery settings
# CELERY_BEAT_SCHEDULE = {
#     'task_hello': {
#         'task': 'ATMA.tasks.task_hello',
#          "schedule": crontab(hour="*/1"),
#
#     }

#}
CELERY_ALWAYS_EAGER = True


CELERY_BROKER_URL= 'amqp://guest:guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_BACKEND = 'django-db'
CELERY_TASK_SERIALIZER = 'json'
